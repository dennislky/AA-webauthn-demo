{"version":3,"file":"static/js/259.61e76358.chunk.js","mappings":"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","sources":["components/CardActionButton.js","features/signers/webAuthnSigner.js","features/createAA.js"],"sourcesContent":["import { LoadingButton } from \"@mui/lab\";\n\nconst CardActionButton = ({\n  buttonText,\n  onClick,\n  disabled = false,\n  testId = \"\",\n  loading = false,\n}) => {\n  return (\n    <LoadingButton\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid={testId}\n      loading={loading}\n    >\n      {buttonText}\n    </LoadingButton>\n  );\n};\n\nexport { CardActionButton };\n","import { BigNumber } from \"ethers\";\nimport { arrayify, defaultAbiCoder } from \"ethers/lib/utils\";\nimport { utils } from \"@passwordless-id/webauthn\";\n\nimport {\n  castASN1SignatureToRawRS,\n  castPublicKeyToJWKObject,\n} from \"../../utils\";\nimport { authenticate } from \"../../utils/webAuthn\";\n\nexport class WebAuthnSigner {\n  transports;\n  addr;\n  credential;\n  publicKey;\n\n  constructor(transports, address, credential, publicKey) {\n    this.transports = transports;\n    this.addr = address;\n    this.credential = credential;\n    this.publicKey = publicKey;\n  }\n\n  signatureLength() {\n    return 1280;\n  }\n\n  address() {\n    return this.addr;\n  }\n\n  async data() {\n    const jwk = await castPublicKeyToJWKObject(this.publicKey);\n    console.log(\"jwk\", jwk);\n    const bufferX = Buffer.from(utils.parseBase64url(jwk.x.toString()));\n    const bufferY = Buffer.from(utils.parseBase64url(jwk.y.toString()));\n    // console.log(bufferX, bufferY);\n    return defaultAbiCoder.encode(\n      [\"uint256\", \"uint256\"],\n      [BigNumber.from(bufferX), BigNumber.from(bufferY)]\n    );\n  }\n\n  shouldRemoveLeadingZero(bytes) {\n    return bytes[0] === 0x0 && (bytes[1] & (1 << 7)) !== 0;\n  }\n\n  async sign(opHash) {\n    const challenge = utils.toBase64url(arrayify(opHash)).replace(/=/g, \"\");\n    console.log(\"challenge\", challenge);\n    console.log(\"create credential\", this.credential);\n    const challengeBuffer = utils.parseBase64url(challenge);\n    const response = await authenticate(\n      challengeBuffer,\n      this.credential.rawId,\n      this.transports\n    );\n    console.log(\"get credential\", response.credential);\n    const clientDataJSON = new TextDecoder().decode(\n      utils.parseBase64url(\n        utils.toBase64url(response.credential.clientDataJSON)\n      )\n    );\n    const challengePos = clientDataJSON.indexOf(challenge);\n    const challengePrefix = clientDataJSON.substring(0, challengePos);\n    const challengeSuffix = clientDataJSON.substring(\n      challengePos + challenge.length\n    );\n    const authenticatorData = new Uint8Array(\n      response.credential.authenticatorData\n    );\n\n    const parsedSignature = castASN1SignatureToRawRS(\n      response.credential.signature\n    );\n    let rBytes = parsedSignature.r;\n    let sBytes = parsedSignature.s;\n    if (this.shouldRemoveLeadingZero(rBytes)) {\n      rBytes = rBytes.slice(1);\n    }\n    if (this.shouldRemoveLeadingZero(sBytes)) {\n      sBytes = sBytes.slice(1);\n    }\n    // console.log(rBytes, sBytes);\n    const signature = defaultAbiCoder.encode(\n      [\"uint256\", \"uint256\"],\n      [BigNumber.from(rBytes), BigNumber.from(sBytes)]\n    );\n\n    console.log(signature, authenticatorData, challengePrefix, challengeSuffix);\n    return defaultAbiCoder.encode(\n      [\"bytes\", \"bytes\", \"string\", \"string\"],\n      [signature, authenticatorData, challengePrefix, challengeSuffix]\n    );\n  }\n}\n","import { useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  Link,\n} from \"@mui/material\";\nimport { Client, Presets } from \"userop\";\nimport { SmartAccount } from \"smart-accounts\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { useStore } from \"../stores\";\nimport { WebAuthnSigner } from \"./signers/webAuthnSigner\";\nimport {\n  bundlerUrl,\n  webAuthnValidatorAddress,\n  accountFactoryAddress,\n  paymasterUrl,\n  sepoliaRpcUrl,\n  entryPointAddress,\n} from \"../constants\";\n\n// card per feature\nconst CreateAACard = () => {\n  // mobx store\n  const { appStore } = useStore();\n  const isInit = appStore.isInit;\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  // feature logic\n  const createAccount = async () => {\n    if (!appStore.isInit) {\n      appStore.snackBarMessage = \"Please create passkey first\";\n      appStore.openSnackBar = true;\n    }\n    try {\n      setIsLoading(true);\n      const signer = new WebAuthnSigner(\n        appStore.transports,\n        webAuthnValidatorAddress,\n        appStore.createCredential,\n        appStore.publicKey\n      );\n\n      const client = await Client.init(sepoliaRpcUrl, {\n        entryPoint: entryPointAddress,\n        overrideBundlerRpc: bundlerUrl,\n      });\n      const accountBuilder = await SmartAccount.init(signer, sepoliaRpcUrl, {\n        overrideBundlerRpc: bundlerUrl,\n        entryPoint: entryPointAddress,\n        factory: accountFactoryAddress,\n        paymasterMiddleware: Presets.Middleware.verifyingPaymaster(\n          paymasterUrl,\n          {\n            type: \"payg\",\n          }\n        ),\n      });\n      console.log(\"accountBuilder\", accountBuilder);\n\n      // cannot use bundler, need send data to entrypoint yourself\n      const response = await client.sendUserOperation(accountBuilder);\n      appStore.accountAddress = accountBuilder.getSender();\n      appStore.createAccountTxHash = response.userOpHash;\n\n      const userOperationEvent = await response.wait();\n      console.log(\"userOperationEvent\", userOperationEvent);\n      // base.messages.push({\n      //   text: \"create account txHash: \",\n      //   link: {\n      //     text: userOperationEvent.transactionHash,\n      //     href: `https://sepolia.etherscan.io/tx/${userOperationEvent?.transactionHash}`,\n      //   },\n      // });\n      if (userOperationEvent) {\n        appStore.snackBarMessage = \"Account created successfully!\";\n        appStore.openSnackBar = true;\n      }\n    } catch (err) {\n      console.error(err);\n      appStore.snackBarMessage = `${err.toString()}`;\n      appStore.openSnackBar = true;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // render logic\n  return isInit ? (\n    <>\n      <Card variant=\"outlined\" sx={{ minWidth: 275, borderRadius: 5 }}>\n        <CardContent sx={{ pb: 1 }}>\n          <Typography display=\"inline\" sx={{ fontSize: 26 }}>\n            Create Account\n          </Typography>\n        </CardContent>\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          <CardActionButton\n            buttonText=\"Create Account\"\n            onClick={createAccount}\n            testId=\"create-account\"\n            loading={isLoading}\n          />\n        </CardActions>\n        {appStore.createAccountTxHash && appStore.accountAddress && (\n          <CardContent sx={{ pb: 1 }}>\n            {appStore.createAccountTxHash && (\n              <Typography sx={{ fontSize: 16 }}>\n                {\"Transaction Details: \"}\n                <Link\n                  underline=\"always\"\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                  href={`https://dashboard.tenderly.co/tx/sepolia/${appStore.createAccountTxHash}?trace=0`}\n                >\n                  {appStore.createAccountTxHash}\n                </Link>\n              </Typography>\n            )}\n            {appStore.accountAddress && (\n              <Typography sx={{ fontSize: 16 }}>\n                {\"Account Address: \"}\n                <Link\n                  underline=\"always\"\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                  href={`https://sepolia.etherscan.io/address/${appStore.accountAddress}`}\n                >\n                  {appStore.accountAddress}\n                </Link>\n              </Typography>\n            )}\n          </CardContent>\n        )}\n      </Card>\n    </>\n  ) : null;\n};\n\nexport default observer(CreateAACard);\n"],"names":["CardActionButton","_ref","buttonText","onClick","disabled","testId","loading","_jsx","LoadingButton","size","variant","sx","backgroundColor","borderRadius","children","WebAuthnSigner","constructor","transports","address","credential","publicKey","this","addr","signatureLength","data","jwk","castPublicKeyToJWKObject","console","log","bufferX","Buffer","from","utils","x","toString","bufferY","y","defaultAbiCoder","encode","BigNumber","shouldRemoveLeadingZero","bytes","sign","opHash","challenge","arrayify","replace","challengeBuffer","response","authenticate","rawId","clientDataJSON","TextDecoder","decode","challengePos","indexOf","challengePrefix","substring","challengeSuffix","length","authenticatorData","Uint8Array","parsedSignature","castASN1SignatureToRawRS","signature","rBytes","r","sBytes","s","slice","observer","CreateAACard","appStore","useStore","isInit","isLoading","setIsLoading","useState","_Fragment","_jsxs","Card","minWidth","CardContent","pb","Typography","display","fontSize","CardActions","pl","pr","async","snackBarMessage","openSnackBar","signer","webAuthnValidatorAddress","createCredential","client","Client","init","sepoliaRpcUrl","entryPoint","entryPointAddress","overrideBundlerRpc","bundlerUrl","accountBuilder","SmartAccount","factory","accountFactoryAddress","paymasterMiddleware","Presets","Middleware","verifyingPaymaster","paymasterUrl","type","sendUserOperation","accountAddress","getSender","createAccountTxHash","userOpHash","userOperationEvent","wait","err","error","Link","underline","target","rel","href"],"sourceRoot":""}