{"version":3,"file":"static/js/673.03a51d39.chunk.js","mappings":"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","sources":["components/CardActionButton.js","features/sendRecoveryEmail.js"],"sourcesContent":["import { LoadingButton } from \"@mui/lab\";\n\nconst CardActionButton = ({\n  buttonText,\n  onClick,\n  disabled = false,\n  testId = \"\",\n  loading = false,\n  sx,\n}) => {\n  return (\n    <LoadingButton\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ ...sx, backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid={testId}\n      loading={loading}\n    >\n      {buttonText}\n    </LoadingButton>\n  );\n};\n\nexport { CardActionButton };\n","import { useEffect, useMemo, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Card, CardContent, CardActions, Typography } from \"@mui/material\";\nimport { ethers, BigNumber } from \"ethers\";\nimport { defaultAbiCoder } from \"ethers/lib/utils\";\nimport { utils } from \"@passwordless-id/webauthn\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { useStore } from \"../stores\";\nimport {\n  chainId,\n  recoveryEmailDestination,\n  webAuthnABI,\n  webAuthnValidatorAddress,\n} from \"../constants\";\n\n// card per feature\nconst SendRecoveryEmailCard = () => {\n  // mobx store\n  const { appStore } = useStore();\n  const accountEmail = appStore.recoveryEmail;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [recoveredPublicKey, setRecoveredPublicKey] = useState(\"0x\");\n\n  const webAuthn = useMemo(() => {\n    if (!appStore.provider) return;\n    return new ethers.Contract(\n      webAuthnValidatorAddress,\n      webAuthnABI,\n      appStore.provider\n    );\n  }, [appStore.provider]);\n\n  useEffect(() => {\n    const getPublicKey = async () => {\n      const publicKey = accountEmail\n        ? await webAuthn.publicKeys(\n            appStore.accountAddress,\n            appStore.createCredentialId\n          )\n        : \"0x\";\n      return publicKey;\n    };\n    getPublicKey().then((publicKey) => {\n      if (publicKey !== \"0x\") {\n        console.log(\"publicKey\", publicKey);\n        setRecoveredPublicKey(publicKey);\n      }\n    });\n  }, [\n    accountEmail,\n    appStore.accountAddress,\n    appStore.createCredentialId,\n    webAuthn,\n  ]);\n\n  // feature logic\n  const sendRecoveryEmail = async () => {\n    if (!accountEmail) {\n      appStore.showSnackBar(\"Please add recovery email first\");\n    }\n    try {\n      setIsLoading(true);\n      console.log(\"webAuthn contract\", webAuthn);\n      const email = await webAuthn.emails(appStore.accountAddress);\n      console.log(\"email\", email);\n      const nonce = await webAuthn.recoveryNonce(appStore.accountAddress);\n      console.log(\"nonce\", BigNumber.from(nonce).toNumber());\n      console.log(\"credentialId\", appStore.createCredentialId);\n      const publicKey = await webAuthn.publicKeys(\n        appStore.accountAddress,\n        appStore.createCredentialId\n      );\n      console.log(\"publicKey\", publicKey);\n      const bufferX = Buffer.from(\n        utils.parseBase64url(appStore.publicKey.x.toString())\n      );\n      const bufferY = Buffer.from(\n        utils.parseBase64url(appStore.publicKey.y.toString())\n      );\n      const bytes = defaultAbiCoder.encode(\n        [\"uint256\", \"uint256\"],\n        [BigNumber.from(bufferX), BigNumber.from(bufferY)]\n      );\n      const encodeData = ethers.utils.defaultAbiCoder.encode(\n        [\"uint256\", \"address\", \"address\", \"uint256\", \"bytes\", \"string\"],\n        [\n          chainId,\n          webAuthnValidatorAddress,\n          appStore.accountAddress,\n          nonce,\n          bytes,\n          appStore.createCredentialId,\n        ]\n      );\n      const sendTo = recoveryEmailDestination;\n      window.open(\n        `https://mail.google.com/mail/u/1/?view=cm&fs=1&tf=1&to=${sendTo}&su=${encodeData.slice(\n          2\n        )}`,\n        \"_blank\"\n      );\n      // window.open(`mailto:${sendTo}?subject=${encodeData.slice(2)}`, \"_blank\");\n\n      do {\n        const publicKey = await webAuthn.publicKeys(\n          appStore.accountAddress,\n          appStore.createCredentialId\n        );\n        if (publicKey !== \"0x\") {\n          setRecoveredPublicKey(publicKey);\n          console.log(\"recoveredPublicKey\", recoveredPublicKey);\n          break;\n        }\n        await new Promise((r) => setTimeout(r, 2000));\n      } while (recoveredPublicKey === \"0x\");\n    } catch (err) {\n      console.error(err);\n      appStore.showSnackBar(`${err.toString()}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // render logic\n  return accountEmail ? (\n    <>\n      <Card variant=\"outlined\" sx={{ minWidth: 275, borderRadius: 5 }}>\n        <CardContent sx={{ pb: 1 }}>\n          <Typography display=\"inline\" sx={{ fontSize: 26 }}>\n            Send Email to Bind New Credential\n          </Typography>\n        </CardContent>\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          <CardActionButton\n            buttonText=\"Send Email\"\n            sx={{ ml: 1 }}\n            onClick={sendRecoveryEmail}\n            testId=\"send-email\"\n            loading={isLoading}\n            disabled={recoveredPublicKey !== \"0x\"}\n          />\n        </CardActions>\n        <CardContent sx={{ pb: 1 }}>\n          <Typography sx={{ fontSize: 14 }}>\n            {`Account Address: ${appStore.accountAddress}`}\n            <br />\n            {`Credential ID: ${appStore.createCredentialId}`}\n            <br />\n            {`Public Key: ${recoveredPublicKey}`}\n          </Typography>\n        </CardContent>\n      </Card>\n    </>\n  ) : null;\n};\n\nexport default observer(SendRecoveryEmailCard);\n"],"names":["CardActionButton","_ref","buttonText","onClick","disabled","testId","loading","sx","_jsx","LoadingButton","size","variant","backgroundColor","borderRadius","children","observer","SendRecoveryEmailCard","appStore","useStore","accountEmail","recoveryEmail","isLoading","setIsLoading","useState","recoveredPublicKey","setRecoveredPublicKey","webAuthn","useMemo","provider","ethers","webAuthnValidatorAddress","webAuthnABI","useEffect","async","publicKeys","accountAddress","createCredentialId","getPublicKey","then","publicKey","console","log","_Fragment","_jsxs","Card","minWidth","CardContent","pb","Typography","display","fontSize","CardActions","pl","pr","ml","showSnackBar","email","emails","nonce","recoveryNonce","BigNumber","from","toNumber","bufferX","Buffer","utils","x","toString","bufferY","y","bytes","defaultAbiCoder","encode","encodeData","chainId","sendTo","recoveryEmailDestination","window","open","slice","Promise","r","setTimeout","err","error"],"sourceRoot":""}