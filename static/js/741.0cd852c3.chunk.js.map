{"version":3,"file":"static/js/741.0cd852c3.chunk.js","mappings":"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","sources":["components/CardActionButton.js","features/emailRecovery.js","features/signers/webAuthnSigner.js"],"sourcesContent":["import { LoadingButton } from \"@mui/lab\";\n\nconst CardActionButton = ({\n  buttonText,\n  onClick,\n  disabled = false,\n  testId = \"\",\n  loading = false,\n  sx,\n}) => {\n  return (\n    <LoadingButton\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ ...sx, backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid={testId}\n      loading={loading}\n    >\n      {buttonText}\n    </LoadingButton>\n  );\n};\n\nexport { CardActionButton };\n","import { useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  Link,\n  TextField,\n} from \"@mui/material\";\nimport { Client, Presets } from \"userop\";\nimport { SmartAccount } from \"smart-accounts\";\nimport { ethers } from \"ethers\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { useStore } from \"../stores\";\nimport { WebAuthnSigner } from \"./signers/webAuthnSigner\";\nimport {\n  bundlerUrl,\n  webAuthnValidatorAddress,\n  accountFactoryAddress,\n  paymasterUrl,\n  sepoliaRpcUrl,\n  entryPointAddress,\n} from \"../constants\";\n\n// card per feature\nconst EmailRecoveryCard = () => {\n  // mobx store\n  const { appStore } = useStore();\n  const accountAddress = appStore.accountAddress;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [email, setEmail] = useState(\"\");\n\n  // feature logic\n  const addRecoveryEmail = async ({ email }) => {\n    if (!appStore.accountAddress) {\n      appStore.snackBarMessage = \"Please create account first\";\n      appStore.openSnackBar = true;\n    }\n    try {\n      setIsLoading(true);\n      const signer = new WebAuthnSigner(\n        appStore.transports,\n        webAuthnValidatorAddress,\n        appStore.createCredential,\n        appStore.publicKey\n      );\n      const client = await Client.init(sepoliaRpcUrl, {\n        entryPoint: entryPointAddress,\n        overrideBundlerRpc: bundlerUrl,\n      });\n      const accountBuilder = await SmartAccount.init(signer, sepoliaRpcUrl, {\n        overrideBundlerRpc: bundlerUrl,\n        entryPoint: entryPointAddress,\n        factory: accountFactoryAddress,\n        paymasterMiddleware: Presets.Middleware.verifyingPaymaster(\n          paymasterUrl,\n          {\n            type: \"payg\",\n          }\n        ),\n      });\n      console.log(\"accountBuilder\", accountBuilder);\n\n      // const withdrawTo = new ethers.utils.Interface([\n      //   \"function withdrawTo(address,uint256)\",\n      // ]);\n      // const withdrawToCallData = withdrawTo.encodeFunctionData(\"withdrawTo\", [\n      //   valueBN.toString(),\n      // ]);\n      const execute = new ethers.utils.Interface([\n        \"function execute(address,uint256,bytes)\",\n      ]);\n      const executeCallData = execute.encodeFunctionData(\"execute\", [\n        \"0x22C1317FE43132b22860e8b465548613d6151a9F\",\n        0,\n        \"0x\",\n      ]);\n      accountBuilder.setCallData(executeCallData);\n\n      const response = await client.sendUserOperation(accountBuilder);\n      appStore.addRecoveryEmailTxHash = response.userOpHash;\n\n      const userOperationEvent = await response.wait();\n      console.log(\"userOperationEvent\", userOperationEvent);\n      if (userOperationEvent) {\n        appStore.snackBarMessage = \"Recovery email added successfully!\";\n        appStore.openSnackBar = true;\n      }\n    } catch (err) {\n      console.error(err);\n      appStore.snackBarMessage = `${err.toString()}`;\n      appStore.openSnackBar = true;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // render logic\n  return accountAddress ? (\n    <>\n      <Card variant=\"outlined\" sx={{ minWidth: 275, borderRadius: 5 }}>\n        <CardContent sx={{ pb: 1 }}>\n          <Typography display=\"inline\" sx={{ fontSize: 26 }}>\n            Add Recovery Email\n          </Typography>\n        </CardContent>\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          <TextField\n            id=\"email\"\n            label=\"Email\"\n            variant=\"filled\"\n            onChange={(event) => {\n              setEmail(event.target.value);\n            }}\n          />\n          <CardActionButton\n            buttonText=\"Add Recovery Email\"\n            sx={{ ml: 1 }}\n            onClick={() =>\n              addRecoveryEmail({\n                email,\n              })\n            }\n            testId=\"send-transaction\"\n            loading={isLoading}\n          />\n        </CardActions>\n        {appStore.addRecoveryEmailTxHash && (\n          <CardContent sx={{ pb: 1 }}>\n            {appStore.addRecoveryEmailTxHash && (\n              <Typography sx={{ fontSize: 16 }}>\n                {\"Transaction Details: \"}\n                <Link\n                  underline=\"always\"\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                  href={`https://dashboard.tenderly.co/tx/sepolia/${appStore.addRecoveryEmailTxHash}?trace=0`}\n                >\n                  {appStore.addRecoveryEmailTxHash}\n                </Link>\n              </Typography>\n            )}\n          </CardContent>\n        )}\n      </Card>\n    </>\n  ) : null;\n};\n\nexport default observer(EmailRecoveryCard);\n","import { BigNumber } from \"ethers\";\nimport { arrayify, defaultAbiCoder } from \"ethers/lib/utils\";\nimport { utils } from \"@passwordless-id/webauthn\";\n\nimport {\n  castASN1SignatureToRawRS,\n  castPublicKeyToJWKObject,\n} from \"../../utils\";\nimport { authenticate } from \"../../utils/webAuthn\";\n\nexport class WebAuthnSigner {\n  transports;\n  addr;\n  credential;\n  publicKey;\n\n  constructor(transports, address, credential, publicKey) {\n    this.transports = transports;\n    this.addr = address;\n    this.credential = credential;\n    this.publicKey = publicKey;\n  }\n\n  signatureLength() {\n    return 1280;\n  }\n\n  address() {\n    return this.addr;\n  }\n\n  async data() {\n    const jwk = await castPublicKeyToJWKObject(this.publicKey);\n    console.log(\"jwk\", jwk);\n    const bufferX = Buffer.from(utils.parseBase64url(jwk.x.toString()));\n    const bufferY = Buffer.from(utils.parseBase64url(jwk.y.toString()));\n    // console.log(bufferX, bufferY);\n    return defaultAbiCoder.encode(\n      [\"uint256\", \"uint256\"],\n      [BigNumber.from(bufferX), BigNumber.from(bufferY)]\n    );\n  }\n\n  shouldRemoveLeadingZero(bytes) {\n    return bytes[0] === 0x0 && (bytes[1] & (1 << 7)) !== 0;\n  }\n\n  async sign(opHash) {\n    const challenge = utils.toBase64url(arrayify(opHash)).replace(/=/g, \"\");\n    console.log(\"challenge\", challenge);\n    console.log(\"create credential\", this.credential);\n    const challengeBuffer = utils.parseBase64url(challenge);\n    const response = await authenticate(\n      challengeBuffer,\n      this.credential.rawId,\n      this.transports\n    );\n    console.log(\"get credential\", response.credential);\n    const clientDataJSON = new TextDecoder().decode(\n      utils.parseBase64url(\n        utils.toBase64url(response.credential.clientDataJSON)\n      )\n    );\n    const challengePos = clientDataJSON.indexOf(challenge);\n    const challengePrefix = clientDataJSON.substring(0, challengePos);\n    const challengeSuffix = clientDataJSON.substring(\n      challengePos + challenge.length\n    );\n    const authenticatorData = new Uint8Array(\n      response.credential.authenticatorData\n    );\n\n    const parsedSignature = castASN1SignatureToRawRS(\n      response.credential.signature\n    );\n    let rBytes = parsedSignature.r;\n    let sBytes = parsedSignature.s;\n    if (this.shouldRemoveLeadingZero(rBytes)) {\n      rBytes = rBytes.slice(1);\n    }\n    if (this.shouldRemoveLeadingZero(sBytes)) {\n      sBytes = sBytes.slice(1);\n    }\n    // console.log(rBytes, sBytes);\n    const signature = defaultAbiCoder.encode(\n      [\"uint256\", \"uint256\"],\n      [BigNumber.from(rBytes), BigNumber.from(sBytes)]\n    );\n\n    console.log(signature, authenticatorData, challengePrefix, challengeSuffix);\n    return defaultAbiCoder.encode(\n      [\"bytes\", \"bytes\", \"string\", \"string\"],\n      [signature, authenticatorData, challengePrefix, challengeSuffix]\n    );\n  }\n}\n"],"names":["CardActionButton","_ref","buttonText","onClick","disabled","testId","loading","sx","_jsx","LoadingButton","size","variant","backgroundColor","borderRadius","children","observer","EmailRecoveryCard","appStore","useStore","accountAddress","isLoading","setIsLoading","useState","email","setEmail","_Fragment","_jsxs","Card","minWidth","CardContent","pb","Typography","display","fontSize","CardActions","pl","pr","TextField","id","label","onChange","event","target","value","ml","async","snackBarMessage","openSnackBar","signer","WebAuthnSigner","transports","webAuthnValidatorAddress","createCredential","publicKey","client","Client","init","sepoliaRpcUrl","entryPoint","entryPointAddress","overrideBundlerRpc","bundlerUrl","accountBuilder","SmartAccount","factory","accountFactoryAddress","paymasterMiddleware","Presets","Middleware","verifyingPaymaster","paymasterUrl","type","console","log","executeCallData","ethers","encodeFunctionData","setCallData","response","sendUserOperation","addRecoveryEmailTxHash","userOpHash","userOperationEvent","wait","err","error","toString","addRecoveryEmail","Link","underline","rel","href","constructor","address","credential","this","addr","signatureLength","data","jwk","castPublicKeyToJWKObject","bufferX","Buffer","from","utils","x","bufferY","y","defaultAbiCoder","encode","BigNumber","shouldRemoveLeadingZero","bytes","sign","opHash","challenge","arrayify","replace","challengeBuffer","authenticate","rawId","clientDataJSON","TextDecoder","decode","challengePos","indexOf","challengePrefix","substring","challengeSuffix","length","authenticatorData","Uint8Array","parsedSignature","castASN1SignatureToRawRS","signature","rBytes","r","sBytes","s","slice"],"sourceRoot":""}