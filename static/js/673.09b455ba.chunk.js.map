{"version":3,"file":"static/js/673.09b455ba.chunk.js","mappings":"+JAEA,MAAMA,EAAmBC,IAOlB,IAPmB,WACxBC,EAAU,QACVC,EAAO,SACPC,GAAW,EAAK,OAChBC,EAAS,GAAE,QACXC,GAAU,EAAK,GACfC,GACDN,EACC,OACEO,EAAAA,EAAAA,KAACC,EAAAA,EAAa,CACZC,KAAK,QACLC,QAAQ,YACRJ,GAAI,IAAKA,EAAIK,gBAAiB,QAASC,aAAc,GACrDV,QAASA,EACTC,SAAUA,EACV,cAAaC,EACbC,QAASA,EAAQQ,SAEhBZ,GACa,C,0OCJpB,MA2FA,GAAea,EAAAA,EAAAA,KA3FeC,KAE5B,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,MACfC,EAAeF,EAASG,eAEvBC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GAgE3C,OAAOJ,GACLX,EAAAA,EAAAA,KAAAgB,EAAAA,SAAA,CAAAV,UACEW,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACf,QAAQ,WAAWJ,GAAI,CAAEoB,SAAU,IAAKd,aAAc,GAAIC,SAAA,EAC9DN,EAAAA,EAAAA,KAACoB,EAAAA,EAAW,CAACrB,GAAI,CAAEsB,GAAI,GAAIf,UACzBN,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACC,QAAQ,SAASxB,GAAI,CAAEyB,SAAU,IAAKlB,SAAC,2BAIrDN,EAAAA,EAAAA,KAACyB,EAAAA,EAAW,CAAC1B,GAAI,CAAE2B,GAAI,EAAGC,GAAI,EAAGN,GAAI,GAAIf,UACvCN,EAAAA,EAAAA,KAACR,EAAAA,EAAgB,CACfE,WAAW,sBACXK,GAAI,CAAE6B,GAAI,GACVjC,QAzEgBkC,UACnBlB,GACHF,EAASqB,aAAa,mCAExB,IACEhB,GAAa,GAEb,MAAMiB,EAAW,IAAIC,EAAAA,GACnBC,EAAAA,GACAC,EAAAA,GACAzB,EAAS0B,UAEXC,QAAQC,IAAI,oBAAqBN,GACjC,MAAMO,QAAcP,EAASQ,OAAO9B,EAAS+B,gBAC7CJ,QAAQC,IAAI,QAASC,GACrB,MAAMG,QAAcV,EAASW,cAAcjC,EAAS+B,gBACpDJ,QAAQC,IAAI,QAASM,EAAAA,GAAUC,KAAKH,GAAOI,YAC3CT,QAAQC,IAAI,YAAa5B,EAASqC,oBAClC,MAAMC,QAAkBhB,EAASiB,WAC/BvC,EAAS+B,eACT/B,EAASqC,oBAEXV,QAAQC,IAAI,YAAaU,GACzB,MAAME,EAAUC,EAAON,KACrBO,EAAAA,GAAAA,eAAqB1C,EAASsC,UAAUK,EAAEC,aAEtCC,EAAUJ,EAAON,KACrBO,EAAAA,GAAAA,eAAqB1C,EAASsC,UAAUQ,EAAEF,aAEtCG,EAAQC,EAAAA,gBAAgBC,OAC5B,CAAC,UAAW,WACZ,CAACf,EAAAA,GAAUC,KAAKK,GAAUN,EAAAA,GAAUC,KAAKU,KAErCK,EAAa3B,EAAAA,EAA6B0B,OAC9C,CAAC,UAAW,UAAW,UAAW,UAAW,QAAS,UACtD,CACEE,EAAAA,GACA3B,EAAAA,GACAxB,EAAS+B,eACTC,EACAe,EACA/C,EAASqC,qBAGPe,EAASC,EAAAA,GACfC,OAAOC,KACJ,0DAAyDH,QAAaF,EAAWM,MAChF,KAEF,SAGJ,CAAE,MAAOC,GACP9B,QAAQ+B,MAAMD,GACdzD,EAASqB,aAAc,GAAEoC,EAAIb,aAC/B,CAAC,QACCvC,GAAa,EACf,GAiBQjB,OAAO,aACPC,QAASe,WAKf,IAAI,G","sources":["components/CardActionButton.js","features/sendRecoveryEmail.js"],"sourcesContent":["import { LoadingButton } from \"@mui/lab\";\n\nconst CardActionButton = ({\n  buttonText,\n  onClick,\n  disabled = false,\n  testId = \"\",\n  loading = false,\n  sx,\n}) => {\n  return (\n    <LoadingButton\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ ...sx, backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid={testId}\n      loading={loading}\n    >\n      {buttonText}\n    </LoadingButton>\n  );\n};\n\nexport { CardActionButton };\n","import { useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Card, CardContent, CardActions, Typography } from \"@mui/material\";\nimport { ethers, BigNumber } from \"ethers\";\nimport { defaultAbiCoder } from \"ethers/lib/utils\";\nimport { utils } from \"@passwordless-id/webauthn\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { useStore } from \"../stores\";\nimport {\n  chainId,\n  recoveryEmailDestination,\n  webAuthnABI,\n  webAuthnValidatorAddress,\n} from \"../constants\";\n\n// card per feature\nconst SendRecoveryEmailCard = () => {\n  // mobx store\n  const { appStore } = useStore();\n  const accountEmail = appStore.recoveryEmail;\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  // feature logic\n  const sendRecoveryEmail = async () => {\n    if (!accountEmail) {\n      appStore.showSnackBar(\"Please add recovery email first\");\n    }\n    try {\n      setIsLoading(true);\n\n      const webAuthn = new ethers.Contract(\n        webAuthnValidatorAddress,\n        webAuthnABI,\n        appStore.provider\n      );\n      console.log(\"webAuthn contract\", webAuthn);\n      const email = await webAuthn.emails(appStore.accountAddress);\n      console.log(\"email\", email);\n      const nonce = await webAuthn.recoveryNonce(appStore.accountAddress);\n      console.log(\"nonce\", BigNumber.from(nonce).toNumber());\n      console.log(\"passkeyId\", appStore.createCredentialId);\n      const publicKey = await webAuthn.publicKeys(\n        appStore.accountAddress,\n        appStore.createCredentialId\n      );\n      console.log(\"publicKey\", publicKey);\n      const bufferX = Buffer.from(\n        utils.parseBase64url(appStore.publicKey.x.toString())\n      );\n      const bufferY = Buffer.from(\n        utils.parseBase64url(appStore.publicKey.y.toString())\n      );\n      const bytes = defaultAbiCoder.encode(\n        [\"uint256\", \"uint256\"],\n        [BigNumber.from(bufferX), BigNumber.from(bufferY)]\n      );\n      const encodeData = ethers.utils.defaultAbiCoder.encode(\n        [\"uint256\", \"address\", \"address\", \"uint256\", \"bytes\", \"string\"],\n        [\n          chainId,\n          webAuthnValidatorAddress,\n          appStore.accountAddress,\n          nonce,\n          bytes,\n          appStore.createCredentialId,\n        ]\n      );\n      const sendTo = recoveryEmailDestination;\n      window.open(\n        `https://mail.google.com/mail/u/1/?view=cm&fs=1&tf=1&to=${sendTo}&su=${encodeData.slice(\n          2\n        )}`,\n        \"_blank\"\n      );\n      // window.open(`mailto:${sendTo}?subject=${encodeData.slice(2)}`, \"_blank\");\n    } catch (err) {\n      console.error(err);\n      appStore.showSnackBar(`${err.toString()}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // render logic\n  return accountEmail ? (\n    <>\n      <Card variant=\"outlined\" sx={{ minWidth: 275, borderRadius: 5 }}>\n        <CardContent sx={{ pb: 1 }}>\n          <Typography display=\"inline\" sx={{ fontSize: 26 }}>\n            Send Recovery Email\n          </Typography>\n        </CardContent>\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          <CardActionButton\n            buttonText=\"Send Recovery Email\"\n            sx={{ ml: 1 }}\n            onClick={sendRecoveryEmail}\n            testId=\"send-email\"\n            loading={isLoading}\n          />\n        </CardActions>\n      </Card>\n    </>\n  ) : null;\n};\n\nexport default observer(SendRecoveryEmailCard);\n"],"names":["CardActionButton","_ref","buttonText","onClick","disabled","testId","loading","sx","_jsx","LoadingButton","size","variant","backgroundColor","borderRadius","children","observer","SendRecoveryEmailCard","appStore","useStore","accountEmail","recoveryEmail","isLoading","setIsLoading","useState","_Fragment","_jsxs","Card","minWidth","CardContent","pb","Typography","display","fontSize","CardActions","pl","pr","ml","async","showSnackBar","webAuthn","ethers","webAuthnValidatorAddress","webAuthnABI","provider","console","log","email","emails","accountAddress","nonce","recoveryNonce","BigNumber","from","toNumber","createCredentialId","publicKey","publicKeys","bufferX","Buffer","utils","x","toString","bufferY","y","bytes","defaultAbiCoder","encode","encodeData","chainId","sendTo","recoveryEmailDestination","window","open","slice","err","error"],"sourceRoot":""}