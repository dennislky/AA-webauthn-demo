{"version":3,"file":"static/js/778.80cc3dbc.chunk.js","mappings":"2JAEA,MAAMA,EAAmBC,IAKlB,IALmB,WACxBC,EAAU,QACVC,EAAO,SACPC,GAAW,EAAK,OAChBC,EAAS,IACVJ,EACC,OACEK,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,KAAK,QACLC,QAAQ,YACRC,GAAI,CAAEC,gBAAiB,QAASC,aAAc,GAC9CT,QAASA,EACTC,SAAUA,EACV,cAAaC,EAAOQ,SAEnBX,GACM,C,yCClBN,MAAMY,EAAoB,CAC/B,CAAEC,MAAO,WAAYC,MAAO,YAC5B,CAAED,MAAO,iBAAkBC,MAAO,mBAGvBC,EAAmB,CAC9B,CAAEF,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,YAAaC,MAAO,OAC7B,CAAED,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,WAAYC,MAAO,Y,8JCN9B,MAAME,EAA6BjB,IAAwB,IAAvB,cAAEkB,GAAelB,EACnD,OACEK,EAAAA,EAAAA,KAACc,EAAAA,EAAY,CACXC,UAAQ,EACRC,QAASL,EAAAA,EACTP,GAAI,CAAEa,MAAO,IAAKC,GAAI,EAAGC,GAAI,GAC7BC,YAAcC,IAAWrB,EAAAA,EAAAA,KAACsB,EAAAA,EAAS,IAAKD,EAAQZ,MAAM,eACtDc,SAAUA,CAACC,EAAGC,KACZZ,EAAcY,EAAOC,KAAKhB,GAAUA,EAAMA,QAAO,EAEnDiB,qBAAsBA,CAACC,EAAQlB,IAAUkB,EAAOlB,QAAUA,EAAMA,MAChE,cAAY,2BACZ,ECiCN,GAAemB,EAAAA,EAAAA,KAzCSC,KAEtB,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,MAkBrB,OAjBeD,EAASE,QAkBtBjC,EAAAA,EAAAA,KAAAkC,EAAAA,SAAA,CAAA3B,UACE4B,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACjC,QAAQ,WAAWC,GAAI,CAAEiC,SAAU,IAAK/B,aAAc,GAAIC,SAAA,EAC9DP,EAAAA,EAAAA,KAACsC,EAAAA,EAAW,CAAClC,GAAI,CAAEmC,GAAI,GAAIhC,UACzBP,EAAAA,EAAAA,KAACwC,EAAAA,EAAU,CAACC,QAAQ,SAASrC,GAAI,CAAEsC,SAAU,IAAKnC,SAAC,mBAIrD4B,EAAAA,EAAAA,MAACQ,EAAAA,EAAW,CAACvC,GAAI,CAAEwC,GAAI,EAAGzB,GAAI,EAAGoB,GAAI,GAAIhC,SAAA,EACvCP,EAAAA,EAAAA,KAACY,EAA0B,CAACC,cAdbgC,IACrBd,EAASc,WAAaA,CAAU,KAc1B7C,EAAAA,EAAAA,KAACN,EAAAA,EAAgB,CACfE,WAAW,cACXC,QA1BUiD,UAClB,MAAMC,QAAehB,EAASiB,cAE5BjB,EAASkB,iBADI,IAAXF,EACyB,+BAEC,GAAEA,EAAOG,aAEvCnB,EAASoB,cAAe,CAAI,EAoBpBpD,OAAO,wBAKb,IAAI,G","sources":["components/CardActionButton.js","constants/index.js","components/DemoAutocompleteTransport.js","features/getWebAuthn.js"],"sourcesContent":["import { Button } from \"@mui/material\";\n\nconst CardActionButton = ({\n  buttonText,\n  onClick,\n  disabled = false,\n  testId = \"\",\n}) => {\n  return (\n    <Button\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid={testId}\n    >\n      {buttonText}\n    </Button>\n  );\n};\n\nexport { CardActionButton };\n","export const attachmentOptions = [\n  { label: \"Platform\", value: \"platform\" },\n  { label: \"Cross Platform\", value: \"cross-platform\" },\n];\n\nexport const transportOptions = [\n  { label: \"USB\", value: \"usb\" },\n  { label: \"Bluetooth\", value: \"ble\" },\n  { label: \"NFC\", value: \"nfc\" },\n  { label: \"Hybrid\", value: \"hybrid\" },\n  { label: \"Platform\", value: \"internal\" },\n];\n","import { Autocomplete, TextField } from \"@mui/material\";\n\nimport { transportOptions } from \"../constants\";\n\nconst DemoAutocompleteTransports = ({ setTransports }) => {\n  return (\n    <Autocomplete\n      multiple\n      options={transportOptions}\n      sx={{ width: 288, py: 1, pr: 1 }}\n      renderInput={(params) => <TextField {...params} label=\"Transports\" />}\n      onChange={(_, values) => {\n        setTransports(values.map((value) => value.value));\n      }}\n      isOptionEqualToValue={(option, value) => option.value === value.value}\n      data-testid=\"autocomplete-transports\"\n    />\n  );\n};\n\nexport { DemoAutocompleteTransports };\n","import { observer } from \"mobx-react-lite\";\nimport { Card, CardContent, CardActions, Typography } from \"@mui/material\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { useStore } from \"../stores\";\nimport { DemoAutocompleteTransports } from \"../components/DemoAutocompleteTransport\";\n\n// card per feature\nconst GetWebAuthnCard = () => {\n  // mobx store\n  const { appStore } = useStore();\n  const isInit = appStore.isInit;\n\n  // feature logic\n  const getWebAuthn = async () => {\n    const result = await appStore.getWebAuthn();\n    if (result === true) {\n      appStore.snackBarMessage = \"Passkey signed successfully!\";\n    } else {\n      appStore.snackBarMessage = `${result.toString()}`;\n    }\n    appStore.openSnackBar = true;\n  };\n  const setTransports = (transports) => {\n    appStore.transports = transports;\n  };\n\n  // render logic\n  return isInit ? (\n    <>\n      <Card variant=\"outlined\" sx={{ minWidth: 275, borderRadius: 5 }}>\n        <CardContent sx={{ pb: 1 }}>\n          <Typography display=\"inline\" sx={{ fontSize: 26 }}>\n            Get Passkey\n          </Typography>\n        </CardContent>\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          <DemoAutocompleteTransports setTransports={setTransports} />\n          <CardActionButton\n            buttonText=\"Get Passkey\"\n            onClick={getWebAuthn}\n            testId=\"get-passkey\"\n          />\n        </CardActions>\n      </Card>\n    </>\n  ) : null;\n};\n\nexport default observer(GetWebAuthnCard);\n"],"names":["CardActionButton","_ref","buttonText","onClick","disabled","testId","_jsx","Button","size","variant","sx","backgroundColor","borderRadius","children","attachmentOptions","label","value","transportOptions","DemoAutocompleteTransports","setTransports","Autocomplete","multiple","options","width","py","pr","renderInput","params","TextField","onChange","_","values","map","isOptionEqualToValue","option","observer","GetWebAuthnCard","appStore","useStore","isInit","_Fragment","_jsxs","Card","minWidth","CardContent","pb","Typography","display","fontSize","CardActions","pl","transports","async","result","getWebAuthn","snackBarMessage","toString","openSnackBar"],"sourceRoot":""}