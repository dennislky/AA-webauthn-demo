{"version":3,"file":"static/js/305.90e54a02.chunk.js","mappings":"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","sources":["components/CardActionButton.js","features/approve.js","features/signers/webAuthnSigner.js"],"sourcesContent":["import { LoadingButton } from \"@mui/lab\";\n\nconst CardActionButton = ({\n  buttonText,\n  onClick,\n  disabled = false,\n  testId = \"\",\n  loading = false,\n  sx,\n}) => {\n  return (\n    <LoadingButton\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ ...sx, backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid={testId}\n      loading={loading}\n    >\n      {buttonText}\n    </LoadingButton>\n  );\n};\n\nexport { CardActionButton };\n","import { useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  Link,\n  TextField,\n} from \"@mui/material\";\nimport { Client, Presets } from \"userop\";\nimport { SmartAccount } from \"smart-accounts\";\nimport { ethers, BigNumber } from \"ethers\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { useStore } from \"../stores\";\nimport { WebAuthnSigner } from \"./signers/webAuthnSigner\";\nimport {\n  bundlerUrl,\n  webAuthnValidatorAddress,\n  accountFactoryAddress,\n  paymasterUrl,\n  sepoliaRpcUrl,\n  entryPointAddress,\n} from \"../constants\";\n\n// card per feature\nconst ApprovalCard = () => {\n  // mobx store\n  const { appStore } = useStore();\n  const accountAddress = appStore.accountAddress;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [address, setAddress] = useState(\"\");\n  const [value, setValue] = useState(0);\n\n  // feature logic\n  const approve = async ({ target, value }) => {\n    if (!appStore.accountAddress) {\n      appStore.snackBarMessage = \"Please create account first\";\n      appStore.openSnackBar = true;\n    }\n    try {\n      setIsLoading(true);\n      const signer = new WebAuthnSigner(\n        appStore.transports,\n        webAuthnValidatorAddress,\n        appStore.createCredential,\n        appStore.publicKey\n      );\n      const client = await Client.init(sepoliaRpcUrl, {\n        entryPoint: entryPointAddress,\n        overrideBundlerRpc: bundlerUrl,\n      });\n      const accountBuilder = await SmartAccount.init(signer, sepoliaRpcUrl, {\n        overrideBundlerRpc: bundlerUrl,\n        entryPoint: entryPointAddress,\n        factory: accountFactoryAddress,\n        paymasterMiddleware: Presets.Middleware.verifyingPaymaster(\n          paymasterUrl,\n          {\n            type: \"payg\",\n          }\n        ),\n      });\n      console.log(\"accountBuilder\", accountBuilder);\n\n      const num = BigNumber.from(value.toString());\n      const multiplier = BigNumber.from(10).pow(18);\n      const valueBN = num.mul(multiplier);\n      const approve = new ethers.utils.Interface([\n        \"function approve(address,uint256)\",\n      ]);\n      const approveCallData = approve.encodeFunctionData(\"approve\", [\n        target,\n        valueBN.toString(),\n      ]);\n      const execute = new ethers.utils.Interface([\n        \"function execute(address,uint256,bytes)\",\n      ]);\n      const executeCallData = execute.encodeFunctionData(\"execute\", [\n        \"0x22C1317FE43132b22860e8b465548613d6151a9F\",\n        0,\n        approveCallData,\n      ]);\n      accountBuilder.setCallData(executeCallData);\n\n      const response = await client.sendUserOperation(accountBuilder);\n      appStore.approves.push({ txHash: response.userOpHash });\n\n      // const userOperationEvent = await response.wait();\n      // console.log(\"userOperationEvent\", userOperationEvent);\n      // if (userOperationEvent) {\n      //   appStore.snackBarMessage = \"Approval created successfully!\";\n      //   appStore.openSnackBar = true;\n      // }\n    } catch (err) {\n      console.error(err);\n      appStore.snackBarMessage = `${err.toString()}`;\n      appStore.openSnackBar = true;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // render logic\n  return accountAddress ? (\n    <>\n      <Card variant=\"outlined\" sx={{ minWidth: 275, borderRadius: 5 }}>\n        <CardContent sx={{ pb: 1 }}>\n          <Typography display=\"inline\" sx={{ fontSize: 26 }}>\n            Approve\n          </Typography>\n        </CardContent>\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          <TextField\n            id=\"address\"\n            label=\"Address\"\n            variant=\"filled\"\n            onChange={(event) => {\n              setAddress(event.target.value);\n            }}\n          />\n          <TextField\n            id=\"value\"\n            label=\"Value\"\n            variant=\"filled\"\n            onChange={(event) => {\n              setValue(event.target.value);\n            }}\n          />\n          <CardActionButton\n            buttonText=\"Approve\"\n            sx={{ ml: 1 }}\n            onClick={() =>\n              approve({\n                target: address,\n                value: value * 1000,\n              })\n            }\n            testId=\"approve\"\n            loading={isLoading}\n          />\n        </CardActions>\n        {appStore.approves.map((approve, index) => {\n          return (\n            <CardContent sx={{ pb: 1 }} key={index}>\n              {approve.txHash && (\n                <Typography sx={{ fontSize: 16 }}>\n                  {\"Transaction Details: \"}\n                  <Link\n                    underline=\"always\"\n                    target=\"_blank\"\n                    rel=\"noopener\"\n                    href={`https://dashboard.tenderly.co/tx/sepolia/${approve.txHash}?trace=0`}\n                  >\n                    {approve.txHash}\n                  </Link>\n                </Typography>\n              )}\n            </CardContent>\n          );\n        })}\n      </Card>\n    </>\n  ) : null;\n};\n\nexport default observer(ApprovalCard);\n","import { BigNumber } from \"ethers\";\nimport { arrayify, defaultAbiCoder } from \"ethers/lib/utils\";\nimport { utils } from \"@passwordless-id/webauthn\";\n\nimport {\n  castASN1SignatureToRawRS,\n  castPublicKeyToJWKObject,\n} from \"../../utils\";\nimport { authenticate } from \"../../utils/webAuthn\";\n\nexport class WebAuthnSigner {\n  transports;\n  addr;\n  credential;\n  publicKey;\n\n  constructor(transports, address, credential, publicKey) {\n    this.transports = transports;\n    this.addr = address;\n    this.credential = credential;\n    this.publicKey = publicKey;\n  }\n\n  signatureLength() {\n    return 1280;\n  }\n\n  address() {\n    return this.addr;\n  }\n\n  async data() {\n    const jwk = await castPublicKeyToJWKObject(this.publicKey);\n    console.log(\"jwk\", jwk);\n    const bufferX = Buffer.from(utils.parseBase64url(jwk.x.toString()));\n    const bufferY = Buffer.from(utils.parseBase64url(jwk.y.toString()));\n    // console.log(bufferX, bufferY);\n    return defaultAbiCoder.encode(\n      [\"uint256\", \"uint256\"],\n      [BigNumber.from(bufferX), BigNumber.from(bufferY)]\n    );\n  }\n\n  shouldRemoveLeadingZero(bytes) {\n    return bytes[0] === 0x0 && (bytes[1] & (1 << 7)) !== 0;\n  }\n\n  async sign(opHash) {\n    const challenge = utils.toBase64url(arrayify(opHash)).replace(/=/g, \"\");\n    console.log(\"challenge\", challenge);\n    console.log(\"create credential\", this.credential);\n    const challengeBuffer = utils.parseBase64url(challenge);\n    const response = await authenticate(\n      challengeBuffer,\n      this.credential.rawId,\n      this.transports\n    );\n    console.log(\"get credential\", response.credential);\n    const clientDataJSON = new TextDecoder().decode(\n      utils.parseBase64url(\n        utils.toBase64url(response.credential.clientDataJSON)\n      )\n    );\n    const challengePos = clientDataJSON.indexOf(challenge);\n    const challengePrefix = clientDataJSON.substring(0, challengePos);\n    const challengeSuffix = clientDataJSON.substring(\n      challengePos + challenge.length\n    );\n    const authenticatorData = new Uint8Array(\n      response.credential.authenticatorData\n    );\n\n    const parsedSignature = castASN1SignatureToRawRS(\n      response.credential.signature\n    );\n    let rBytes = parsedSignature.r;\n    let sBytes = parsedSignature.s;\n    if (this.shouldRemoveLeadingZero(rBytes)) {\n      rBytes = rBytes.slice(1);\n    }\n    if (this.shouldRemoveLeadingZero(sBytes)) {\n      sBytes = sBytes.slice(1);\n    }\n    // console.log(rBytes, sBytes);\n    const signature = defaultAbiCoder.encode(\n      [\"uint256\", \"uint256\"],\n      [BigNumber.from(rBytes), BigNumber.from(sBytes)]\n    );\n\n    console.log(signature, authenticatorData, challengePrefix, challengeSuffix);\n    return defaultAbiCoder.encode(\n      [\"bytes\", \"bytes\", \"string\", \"string\"],\n      [signature, authenticatorData, challengePrefix, challengeSuffix]\n    );\n  }\n}\n"],"names":["CardActionButton","_ref","buttonText","onClick","disabled","testId","loading","sx","_jsx","LoadingButton","size","variant","backgroundColor","borderRadius","children","observer","ApprovalCard","appStore","useStore","accountAddress","isLoading","setIsLoading","useState","address","setAddress","value","setValue","_Fragment","_jsxs","Card","minWidth","CardContent","pb","Typography","display","fontSize","CardActions","pl","pr","TextField","id","label","onChange","event","target","ml","async","snackBarMessage","openSnackBar","signer","WebAuthnSigner","transports","webAuthnValidatorAddress","createCredential","publicKey","client","Client","init","sepoliaRpcUrl","entryPoint","entryPointAddress","overrideBundlerRpc","bundlerUrl","accountBuilder","SmartAccount","factory","accountFactoryAddress","paymasterMiddleware","Presets","Middleware","verifyingPaymaster","paymasterUrl","type","console","log","num","BigNumber","from","toString","multiplier","pow","valueBN","mul","approveCallData","ethers","encodeFunctionData","executeCallData","setCallData","response","sendUserOperation","approves","push","txHash","userOpHash","err","error","approve","map","index","Link","underline","rel","href","constructor","credential","this","addr","signatureLength","data","jwk","castPublicKeyToJWKObject","bufferX","Buffer","utils","x","bufferY","y","defaultAbiCoder","encode","shouldRemoveLeadingZero","bytes","sign","opHash","challenge","arrayify","replace","challengeBuffer","authenticate","rawId","clientDataJSON","TextDecoder","decode","challengePos","indexOf","challengePrefix","substring","challengeSuffix","length","authenticatorData","Uint8Array","parsedSignature","castASN1SignatureToRawRS","signature","rBytes","r","sBytes","s","slice"],"sourceRoot":""}