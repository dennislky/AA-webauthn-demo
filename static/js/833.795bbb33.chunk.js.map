{"version":3,"file":"static/js/833.795bbb33.chunk.js","mappings":"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","sources":["components/CardActionButton.js","components/DemoAutocompleteAuthenticatorAttachment.js","features/initWebAuthn.js"],"sourcesContent":["import { LoadingButton } from \"@mui/lab\";\n\nconst CardActionButton = ({\n  buttonText,\n  onClick,\n  disabled = false,\n  testId = \"\",\n  loading = false,\n  sx,\n}) => {\n  return (\n    <LoadingButton\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ ...sx, backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid={testId}\n      loading={loading}\n    >\n      {buttonText}\n    </LoadingButton>\n  );\n};\n\nexport { CardActionButton };\n","import { Autocomplete, TextField } from \"@mui/material\";\n\nimport { attachmentOptions } from \"../constants\";\n\nconst DemoAutocompleteAuthenticatorAttachment = ({ setAttachment }) => {\n  return (\n    <Autocomplete\n      options={attachmentOptions}\n      sx={{ width: 288, py: 1, pr: 1 }}\n      renderInput={(params) => (\n        <TextField {...params} label=\"Authenticator Attachment\" />\n      )}\n      onChange={(_, value) => {\n        setAttachment(value?.value);\n      }}\n      isOptionEqualToValue={(option, value) => option.value === value.value}\n      data-testid=\"autocomplete-authenticator-attachment\"\n    />\n  );\n};\n\nexport { DemoAutocompleteAuthenticatorAttachment };\n","import { observer } from \"mobx-react-lite\";\nimport { Card, CardContent, CardActions, Typography } from \"@mui/material\";\nimport { BigNumber } from \"ethers\";\nimport { defaultAbiCoder } from \"ethers/lib/utils\";\nimport { utils } from \"@passwordless-id/webauthn\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { useStore } from \"../stores\";\nimport { DemoAutocompleteAuthenticatorAttachment } from \"../components/DemoAutocompleteAuthenticatorAttachment\";\n\n// card per feature\nconst InitWebAuthnCard = () => {\n  // mobx store\n  const { appStore } = useStore();\n  const isInit = appStore.isInit;\n\n  let bytes = \"0x\";\n  if (appStore.publicKey) {\n    const bufferX = Buffer.from(\n      utils.parseBase64url(appStore.publicKey.x.toString())\n    );\n    const bufferY = Buffer.from(\n      utils.parseBase64url(appStore.publicKey.y.toString())\n    );\n    bytes = defaultAbiCoder.encode(\n      [\"uint256\", \"uint256\"],\n      [BigNumber.from(bufferX), BigNumber.from(bufferY)]\n    );\n  }\n\n  // feature logic\n  const setAttachment = (attachment) => {\n    appStore.attachment = attachment;\n  };\n  const initWebAuthn = async () => {\n    const result = await appStore.initialize();\n    appStore.showSnackBar(\n      result === true\n        ? \"Passkey initialized successfully!\"\n        : `${result.toString()}`\n    );\n  };\n  const resetAppStore = () => {\n    appStore.reset();\n  };\n\n  // render logic\n  return (\n    <>\n      <Card variant=\"outlined\" sx={{ minWidth: 275, borderRadius: 5 }}>\n        <CardContent sx={{ pb: 1 }}>\n          <Typography display=\"inline\" sx={{ fontSize: 26 }}>\n            Initialize Passkey\n          </Typography>\n          {isInit && (\n            <Typography display=\"inline\" sx={{ fontSize: 14, color: \"blue\" }}>\n              {\" (Passkey Initialized)\"}\n            </Typography>\n          )}\n        </CardContent>\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          <DemoAutocompleteAuthenticatorAttachment\n            setAttachment={setAttachment}\n          />\n          <CardActionButton\n            buttonText=\"Initialize Passkey\"\n            onClick={initWebAuthn}\n            testId=\"initialize-passkey\"\n            disabled={!!appStore.createCredentialId}\n          />\n          <CardActionButton\n            buttonText=\"Reset Passkey\"\n            onClick={resetAppStore}\n            testId=\"reset-passkey\"\n          />\n        </CardActions>\n        {appStore.createCredentialId && (\n          <CardContent sx={{ pt: 0, pb: 1 }}>\n            {appStore.createCredentialId && (\n              <Typography sx={{ fontSize: 14 }}>\n                {`Passkey ID: ${appStore.createCredentialId}`}\n              </Typography>\n            )}\n            {appStore.publicKey && (\n              <Typography sx={{ fontSize: 14 }}>\n                {`Passkey Public Key: ${bytes}`}\n              </Typography>\n            )}\n          </CardContent>\n        )}\n      </Card>\n    </>\n  );\n};\n\nexport default observer(InitWebAuthnCard);\n"],"names":["CardActionButton","_ref","buttonText","onClick","disabled","testId","loading","sx","_jsx","LoadingButton","size","variant","backgroundColor","borderRadius","children","DemoAutocompleteAuthenticatorAttachment","setAttachment","Autocomplete","options","attachmentOptions","width","py","pr","renderInput","params","TextField","label","onChange","_","value","isOptionEqualToValue","option","observer","InitWebAuthnCard","appStore","useStore","isInit","bytes","publicKey","bufferX","Buffer","from","utils","x","toString","bufferY","y","defaultAbiCoder","encode","BigNumber","_Fragment","_jsxs","Card","minWidth","CardContent","pb","Typography","display","fontSize","color","CardActions","pl","attachment","async","result","initialize","showSnackBar","createCredentialId","resetAppStore","reset","pt"],"sourceRoot":""}