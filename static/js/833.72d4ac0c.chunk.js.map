{"version":3,"file":"static/js/833.72d4ac0c.chunk.js","mappings":"2JAEA,MAAMA,EAAmBC,IAKlB,IALmB,WACxBC,EAAU,QACVC,EAAO,SACPC,GAAW,EAAK,OAChBC,EAAS,IACVJ,EACC,OACEK,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,KAAK,QACLC,QAAQ,YACRC,GAAI,CAAEC,gBAAiB,QAASC,aAAc,GAC9CT,QAASA,EACTC,SAAUA,EACV,cAAaC,EAAOQ,SAEnBX,GACM,C,yCClBN,MAAMY,EAAoB,CAC/B,CAAEC,MAAO,WAAYC,MAAO,YAC5B,CAAED,MAAO,iBAAkBC,MAAO,mBAGvBC,EAAmB,CAC9B,CAAEF,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,YAAaC,MAAO,OAC7B,CAAED,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,WAAYC,MAAO,Y,8JCN9B,MAAME,EAA0CjB,IAAwB,IAAvB,cAAEkB,GAAelB,EAChE,OACEK,EAAAA,EAAAA,KAACc,EAAAA,EAAY,CACXC,QAASP,EAAAA,EACTJ,GAAI,CAAEY,MAAO,IAAKC,GAAI,EAAGC,GAAI,GAC7BC,YAAcC,IACZpB,EAAAA,EAAAA,KAACqB,EAAAA,EAAS,IAAKD,EAAQX,MAAM,6BAE/Ba,SAAUA,CAACC,EAAGb,KACZG,EAAmB,OAALH,QAAK,IAALA,OAAK,EAALA,EAAOA,MAAM,EAE7Bc,qBAAsBA,CAACC,EAAQf,IAAUe,EAAOf,QAAUA,EAAMA,MAChE,cAAY,yCACZ,ECwCN,GAAegB,EAAAA,EAAAA,KAhDUC,KAEvB,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,MACfC,EAASF,EAASE,OAiBxB,OACE9B,EAAAA,EAAAA,KAAA+B,EAAAA,SAAA,CAAAxB,UACEyB,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAC9B,QAAQ,WAAWC,GAAI,CAAE8B,SAAU,IAAK5B,aAAc,GAAIC,SAAA,EAC9DyB,EAAAA,EAAAA,MAACG,EAAAA,EAAW,CAAC/B,GAAI,CAAEgC,GAAI,GAAI7B,SAAA,EACzBP,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,SAASlC,GAAI,CAAEmC,SAAU,IAAKhC,SAAC,mBAGlDuB,IACC9B,EAAAA,EAAAA,KAACqC,EAAAA,EAAU,CAACC,QAAQ,SAASlC,GAAI,CAAEmC,SAAU,GAAIC,MAAO,QAASjC,SAC9D,+BAIPyB,EAAAA,EAAAA,MAACS,EAAAA,EAAW,CAACrC,GAAI,CAAEsC,GAAI,EAAGxB,GAAI,EAAGkB,GAAI,GAAI7B,SAAA,EACvCP,EAAAA,EAAAA,KAACY,EAAuC,CACtCC,cApBa8B,IACrBf,EAASe,WAAaA,CAAU,KAqB1B3C,EAAAA,EAAAA,KAACN,EAAAA,EAAgB,CACfE,WAAW,iBACXC,QAjCW+C,UACnB,MAAMC,QAAejB,EAASkB,aAE5BlB,EAASmB,iBADI,IAAXF,EACyB,gCAEC,GAAEA,EAAOG,aAEvCpB,EAASqB,cAAe,CAAI,EA2BpBlD,OAAO,0BAIZ,G","sources":["components/CardActionButton.js","constants/index.js","components/DemoAutocompleteAuthenticatorAttachment.js","features/initWebAuthn.js"],"sourcesContent":["import { Button } from \"@mui/material\";\n\nconst CardActionButton = ({\n  buttonText,\n  onClick,\n  disabled = false,\n  testId = \"\",\n}) => {\n  return (\n    <Button\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid={testId}\n    >\n      {buttonText}\n    </Button>\n  );\n};\n\nexport { CardActionButton };\n","export const attachmentOptions = [\n  { label: \"Platform\", value: \"platform\" },\n  { label: \"Cross Platform\", value: \"cross-platform\" },\n];\n\nexport const transportOptions = [\n  { label: \"USB\", value: \"usb\" },\n  { label: \"Bluetooth\", value: \"ble\" },\n  { label: \"NFC\", value: \"nfc\" },\n  { label: \"Hybrid\", value: \"hybrid\" },\n  { label: \"Platform\", value: \"internal\" },\n];\n","import { Autocomplete, TextField } from \"@mui/material\";\n\nimport { attachmentOptions } from \"../constants\";\n\nconst DemoAutocompleteAuthenticatorAttachment = ({ setAttachment }) => {\n  return (\n    <Autocomplete\n      options={attachmentOptions}\n      sx={{ width: 288, py: 1, pr: 1 }}\n      renderInput={(params) => (\n        <TextField {...params} label=\"Authenticator Attachment\" />\n      )}\n      onChange={(_, value) => {\n        setAttachment(value?.value);\n      }}\n      isOptionEqualToValue={(option, value) => option.value === value.value}\n      data-testid=\"autocomplete-authenticator-attachment\"\n    />\n  );\n};\n\nexport { DemoAutocompleteAuthenticatorAttachment };\n","import { observer } from \"mobx-react-lite\";\n\nimport { Card, CardContent, CardActions, Typography } from \"@mui/material\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { useStore } from \"../stores\";\nimport { DemoAutocompleteAuthenticatorAttachment } from \"../components/DemoAutocompleteAuthenticatorAttachment\";\n\n// card per feature\nconst InitWebAuthnCard = () => {\n  // mobx store\n  const { appStore } = useStore();\n  const isInit = appStore.isInit;\n\n  // feature logic\n  const initWebAuthn = async () => {\n    const result = await appStore.initialize();\n    if (result === true) {\n      appStore.snackBarMessage = \"Passkey created successfully!\";\n    } else {\n      appStore.snackBarMessage = `${result.toString()}`;\n    }\n    appStore.openSnackBar = true;\n  };\n  const setAttachment = (attachment) => {\n    appStore.attachment = attachment;\n  };\n\n  // render logic\n  return (\n    <>\n      <Card variant=\"outlined\" sx={{ minWidth: 275, borderRadius: 5 }}>\n        <CardContent sx={{ pb: 1 }}>\n          <Typography display=\"inline\" sx={{ fontSize: 26 }}>\n            Create Passkey\n          </Typography>\n          {isInit && (\n            <Typography display=\"inline\" sx={{ fontSize: 14, color: \"blue\" }}>\n              {\" (Passkey Initialized)\"}\n            </Typography>\n          )}\n        </CardContent>\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          <DemoAutocompleteAuthenticatorAttachment\n            setAttachment={setAttachment}\n          />\n          <CardActionButton\n            buttonText=\"Create Passkey\"\n            onClick={initWebAuthn}\n            testId=\"create-passkey\"\n          />\n        </CardActions>\n      </Card>\n    </>\n  );\n};\n\nexport default observer(InitWebAuthnCard);\n"],"names":["CardActionButton","_ref","buttonText","onClick","disabled","testId","_jsx","Button","size","variant","sx","backgroundColor","borderRadius","children","attachmentOptions","label","value","transportOptions","DemoAutocompleteAuthenticatorAttachment","setAttachment","Autocomplete","options","width","py","pr","renderInput","params","TextField","onChange","_","isOptionEqualToValue","option","observer","InitWebAuthnCard","appStore","useStore","isInit","_Fragment","_jsxs","Card","minWidth","CardContent","pb","Typography","display","fontSize","color","CardActions","pl","attachment","async","result","initialize","snackBarMessage","toString","openSnackBar"],"sourceRoot":""}